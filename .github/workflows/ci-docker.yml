name: CI with Docker Compose

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🕵️ Vérifier les secrets récupérés
        run: |
          echo "RUST_DATABASE_URL=${{ secrets.RUST_DATABASE_URL }}"
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}"
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}"
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}"
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}"
          echo "PORT=${{ secrets.PORT }}"

      - name: 📄 Create .env file from Secrets
        run: |
          echo "DATABASE_URL=${{ secrets.RUST_DATABASE_URL }}" >> rust_service/.env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "PORT=${{ secrets.PORT }}" >> nest_service/.env
    
      - name: 🔍 Debug .env file
        run: cat .env && cat rust_service/.env

      - name: 🐩 Install grpcurl
        run: |
          sudo apt-get update
          sudo apt-get install -y wget
          wget https://github.com/fullstorydev/grpcurl/releases/download/v1.9.2/grpcurl_1.9.2_linux_x86_64.tar.gz
          tar -xvzf grpcurl_1.9.2_linux_x86_64.tar.gz
          sudo mv grpcurl /usr/local/bin/
          grpcurl --version

      - name: 🐫 Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: 🏷 Build and start Docker services
        run: docker compose up -d

      - name: ⏳ Wait for services to be ready
        run: sleep 10

      - name: 🗉 List running containers
        run: docker ps -a

      - name: 📝 Show logs of PostgreSQL
        run: |
          CONTAINER_ID=$(docker ps -aqf "name=postgres")
          if [ -n "$CONTAINER_ID" ]; then
            docker logs $CONTAINER_ID
          else
            echo "No container found for postgres"
          fi
      
      - name: 📝 Show logs of Rust service (including exited containers)
        run: |
          CONTAINER_ID=$(docker ps -aqf "name=rust_service")
          if [ -n "$CONTAINER_ID" ]; then
            docker logs $CONTAINER_ID
          else
            echo "No container found for rust_service"
          fi

      - name: 📝 Show logs of NestJS service
        run: docker logs $(docker ps -qf "name=nest_service")

      #- name: 🚀 Run tests in NestJS container
      #run: docker exec $(docker ps -qf "name=nest_service") npm test

      #- name: 🦀 Run tests in Rust container
      #run: docker exec $(docker ps -qf "name=rust_service") cargo test --verbose

      - name: 🦀 Run SQLx migrations in Rust container
        run: docker exec $(docker ps -qf "name=rust_service") sqlx migrate run

      - name: 🛠️ Test gRPC endpoint
        run: |
          sleep 5  # Attendre que le service Rust soit bien prêt
          grpcurl -plaintext -d '{"name": "Priax"}' localhost:50051 myservice.RustService/SayHello
      
      - name: 🛠️ Test endpoint with curl
        run: curl http://localhost:3000/goodbye?name=Alice
      
      - name: 🛠️ Test POST of specie with curl
        run: curl -X POST http://localhost:3000/add-species -H "Content-Type: application/json" -d '{"name": "Lion", "description": "Grand félin d’Afrique"}'

      - name: 🧐 Check if specie is in the database
        run: |
          docker exec $(docker ps -qf "name=postgres") psql -U priax -d Sylvestre_database -c "SELECT * FROM species;"

      - name: 🛡️ Stop Docker services
        run: docker compose down
